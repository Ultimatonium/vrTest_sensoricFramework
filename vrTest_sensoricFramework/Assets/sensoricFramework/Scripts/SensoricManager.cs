using System;
using System.IO;
using UnityEngine;

namespace SensoricFramework
{
    /// <summary>
    /// Core script of the SensoricFramework.
    /// Mandatory if framework want to be used.
    /// Can only exist once (Singelton)
    /// </summary>
    public class SensoricManager : MonoBehaviour
    {
        /// <summary>
        /// singelton instance
        /// </summary>
        private static SensoricManager instance;

        /// <summary>
        /// array of smells which want to be used olfactory devices
        /// </summary>
        [SerializeField]
        public string[] smells;

        /// <summary>
        /// relativ path of the project to this script
        /// </summary>
        private const string scriptPath = "Assets/sensoricFramework/Scripts/";

        /// <summary>
        /// event which can all active tactile devies
        /// </summary>
        public event EventHandler<PlayTactileEventArgs> PlayTactile;
        /// <summary>
        /// event which can all active thermal devies
        /// </summary>
        public event EventHandler<PlayThermalEventArgs> PlayThermal;
        /// <summary>
        /// event which can all active olfactory devies
        /// </summary>
        public event EventHandler<PlayOlfactoryEventArgs> PlayOlfactory;

        /// <summary>
        /// Property which returns this singelton instance (read-only)
        /// </summary>
        public static SensoricManager Instance
        {
            get
            {
                if (instance == null)
                {
                    Debug.LogError("SensoricManager not available");
                }
                return instance;
            }
        }

        /// <summary>
        /// Unity-Message
        /// sets <see cref="instance"/> for singelton usage
        /// </summary>
        private void Awake()
        {
            if (instance == this)
            {
                return;
            }
            if (instance != null)
            {
                Debug.LogWarning("Multiple SensoricManager");
                Destroy(gameObject);
                return;
            }
            instance = this;
            DontDestroyOnLoad(gameObject);
        }

        /// <summary>
        /// Unity-Message
        /// </summary>
        private void OnValidate()
        {
            GenerateSmellEnum();
        }

        /// <summary>
        /// wrapper to execute event <see cref="PlayTactile"/>
        /// </summary>
        /// <param name="sender"><see cref="SensoricSender"/></param>
        /// <param name="e"><see cref="PlayTactileEventArgs"/></param>
        public void OnPlayTactile(SensoricSender sender, PlayTactileEventArgs e)
        {
            PlayTactile?.Invoke(sender, e);
        }

        /// <summary>
        /// wrapper to execute event <see cref="PlayThermal"/>
        /// </summary>
        /// <param name="sender"><see cref="SensoricSender"/></param>
        /// <param name="e"><see cref="PlayThermalEventArgs"/></param>
        public void OnPlayThermal(SensoricSender sender, PlayThermalEventArgs e)
        {
            PlayThermal?.Invoke(sender, e);
        }

        /// <summary>
        /// wrapper to execute event <see cref="PlayOlfactory"/>
        /// </summary>
        /// <param name="sender"><see cref="SensoricSender"/></param>
        /// <param name="e"><see cref="PlayOlfactoryEventArgs"/></param>
        public void OnPlayOlfactory(SensoricSender sender, PlayOlfactoryEventArgs e)
        {
            PlayOlfactory?.Invoke(sender, e);
        }

        /// <summary>
        /// regenerate <see cref="Smell"/> based on <see cref="smells"/>
        /// </summary>
        private void GenerateSmellEnum()
        {
            if (smells.Length == 0) return;

            string enumString = "";
            enumString += "namespace SensoricFramework { ";
            enumString += Environment.NewLine;
            enumString += "///<summary>automaticly generated by <see cref=\"SensoricManager\"/></summary>";
            enumString += Environment.NewLine;
            enumString += "public enum Smell {";

            enumString += smells[0];
            for (int i = 1; i < smells.Length; i++)
            {
                enumString += ",";
                enumString += smells[i];
            }

            enumString += "}}";

            File.WriteAllText(scriptPath + "/Enum/Smell.cs", enumString);
        }
    }
}